import (
  time
  github.com/davecgh/go-spew/spew
)

type SliceTestObject struct {
  ByteSlice []byte
  U8Slice []uint8
  U16Slice []uint16
  U32Slice []uint32
  U64Slice []uint64
  S8Slice []int8
  S16Slice []int16
  S32Slice []int32
  S64Slice []int64
  StringSlice []string
  TimeSlice []time.Time
}

func (this *SliceTestObject) Dump() string {
    return spew.Sdump(*this)
}

func (o1 *SliceTestObject) Equals(other interface{}) bool {
	switch o2 := other.(type) {
	case *SliceTestObject:
		return o1.equals(o2)
	case SliceTestObject:
		return o1.equals(&o2)
	}
	return false
}

func (o1 *SliceTestObject) equals(o2 *SliceTestObject) bool {
    if len(o1.ByteSlice) != len(o2.ByteSlice) {
        return false  
    }
    for idx, newVal := range o1.ByteSlice {
    if len(o1.U8Slice) != len(o2.U8Slice) {
        return false  
    }
    for idx, newVal := range o1.U8Slice {
    if len(o1.U16Slice) != len(o2.U16Slice) {
        return false  
    }
    for idx, newVal := range o1.U16Slice {
    if len(o1.U32Slice) != len(o2.U32Slice) {
        return false  
    }
    for idx, newVal := range o1.U32Slice {
    if len(o1.U64Slice) != len(o2.U64Slice) {
        return false  
    }
    for idx, newVal := range o1.U64Slice {
    if len(o1.S8Slice) != len(o2.S8Slice) {
        return false  
    }
    for idx, newVal := range o1.S8Slice {
    if len(o1.S16Slice) != len(o2.S16Slice) {
        return false  
    }
    for idx, newVal := range o1.S16Slice {
    if len(o1.S32Slice) != len(o2.S32Slice) {
        return false  
    }
    for idx, newVal := range o1.S32Slice {
    if len(o1.S64Slice) != len(o2.S64Slice) {
        return false  
    }
    for idx, newVal := range o1.S64Slice {
    if len(o1.StringSlice) != len(o2.StringSlice) {
        return false  
    }
    for idx, newVal := range o1.StringSlice {
    if len(o1.TimeSlice) != len(o2.TimeSlice) {
        return false  
    }
    for idx, newVal := range o1.TimeSlice {
}
