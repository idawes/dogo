//
// AUTO-GENERATED by metago. DO NOT EDIT!
//

package test

import (
	"github.com/davecgh/go-spew/spew"
	"github.com/idawes/metago"
	"time"
)

type BasicAttrTypesObject struct {
	ByteField   byte
	UbbField    uint
	U8Field     uint8
	U16Field    uint16
	U32Field    uint32
	U64Field    uint64
	SField      int
	S8Field     int8
	S16Field    int16
	S32Field    int32
	S64Field    int64
	F32Field    float32
	F64Field    float64
	StringField string
	TimeField   time.Time
}

func (this *BasicAttrTypesObject) ConditionalDump(t bool) string {
	if t {
		return this.Dump()
	}
	return ""
}

func (this *BasicAttrTypesObject) Dump() string {
	return spew.Sdump(*this)
}

func (o1 *BasicAttrTypesObject) Equals(o2 *BasicAttrTypesObject) bool {

	{
		va, vb := o1.ByteField, o2.ByteField
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.UbbField, o2.UbbField
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.U8Field, o2.U8Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.U16Field, o2.U16Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.U32Field, o2.U32Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.U64Field, o2.U64Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.SField, o2.SField
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.S8Field, o2.S8Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.S16Field, o2.S16Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.S32Field, o2.S32Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.S64Field, o2.S64Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.F32Field, o2.F32Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.F64Field, o2.F64Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.StringField, o2.StringField
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.TimeField, o2.TimeField
		if va.Equal(vb) {
			return false
		}
	}
	return true
}

func (o1 *BasicAttrTypesObject) Diff(o2 *BasicAttrTypesObject) *metago.Diff {
	d := &metago.Diff{}

	{
		va, vb := o1.ByteField, o2.ByteField
		if va != vb {
			d.Add(metago.NewByteChg(&BasicAttrTypesObjectByteFieldSREF, vb, va))
		}
	}

	{
		va, vb := o1.UbbField, o2.UbbField
		if va != vb {
			d.Add(metago.NewUintChg(&BasicAttrTypesObjectUbbFieldSREF, vb, va))
		}
	}

	{
		va, vb := o1.U8Field, o2.U8Field
		if va != vb {
			d.Add(metago.NewUint8Chg(&BasicAttrTypesObjectU8FieldSREF, vb, va))
		}
	}

	{
		va, vb := o1.U16Field, o2.U16Field
		if va != vb {
			d.Add(metago.NewUint16Chg(&BasicAttrTypesObjectU16FieldSREF, vb, va))
		}
	}

	{
		va, vb := o1.U32Field, o2.U32Field
		if va != vb {
			d.Add(metago.NewUint32Chg(&BasicAttrTypesObjectU32FieldSREF, vb, va))
		}
	}

	{
		va, vb := o1.U64Field, o2.U64Field
		if va != vb {
			d.Add(metago.NewUint64Chg(&BasicAttrTypesObjectU64FieldSREF, vb, va))
		}
	}

	{
		va, vb := o1.SField, o2.SField
		if va != vb {
			d.Add(metago.NewIntChg(&BasicAttrTypesObjectSFieldSREF, vb, va))
		}
	}

	{
		va, vb := o1.S8Field, o2.S8Field
		if va != vb {
			d.Add(metago.NewInt8Chg(&BasicAttrTypesObjectS8FieldSREF, vb, va))
		}
	}

	{
		va, vb := o1.S16Field, o2.S16Field
		if va != vb {
			d.Add(metago.NewInt16Chg(&BasicAttrTypesObjectS16FieldSREF, vb, va))
		}
	}

	{
		va, vb := o1.S32Field, o2.S32Field
		if va != vb {
			d.Add(metago.NewInt32Chg(&BasicAttrTypesObjectS32FieldSREF, vb, va))
		}
	}

	{
		va, vb := o1.S64Field, o2.S64Field
		if va != vb {
			d.Add(metago.NewInt64Chg(&BasicAttrTypesObjectS64FieldSREF, vb, va))
		}
	}

	{
		va, vb := o1.F32Field, o2.F32Field
		if va != vb {
			d.Add(metago.NewFloat32Chg(&BasicAttrTypesObjectF32FieldSREF, vb, va))
		}
	}

	{
		va, vb := o1.F64Field, o2.F64Field
		if va != vb {
			d.Add(metago.NewFloat64Chg(&BasicAttrTypesObjectF64FieldSREF, vb, va))
		}
	}

	{
		va, vb := o1.StringField, o2.StringField
		if va != vb {
			d.Add(metago.NewStringChg(&BasicAttrTypesObjectStringFieldSREF, vb, va))
		}
	}

	{
		va, vb := o1.TimeField, o2.TimeField
		if va.Equal(vb) {
			d.Add(metago.NewTimeChg(&BasicAttrTypesObjectTimeFieldSREF, vb, va))
		}
	}
	return d
}
