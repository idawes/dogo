//
// AUTO-GENERATED by metago. DO NOT EDIT!
//

package test

import (
	"github.com/davecgh/go-spew/spew"
	"github.com/idawes/metago"
	"time"
)

type BasicAttrTypesObject struct {
	ByteField   byte
	U8Field     uint8
	U16Field    uint16
	U32Field    uint32
	U64Field    uint64
	S8Field     int8
	S16Field    int16
	S32Field    int32
	S64Field    int64
	StringField string
	TimeField   Time
}

func (this *BasicAttrTypesObject) ConditionalDump(t bool) string {
	if t {
		return this.Dump()
	}
	return ""
}

func (this *BasicAttrTypesObject) Dump() (string, error) {
	return spew.Sdump(*this)
}

func (o1 *BasicAttrTypesObject) Equals(o2 *BasicAttrTypesObject) bool {

	{
		va, vb := o1.ByteField, o2.ByteField
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.U8Field, o2.U8Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.U16Field, o2.U16Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.U32Field, o2.U32Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.U64Field, o2.U64Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.S8Field, o2.S8Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.S16Field, o2.S16Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.S32Field, o2.S32Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.S64Field, o2.S64Field
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.StringField, o2.StringField
		if va != vb {
			return false
		}
	}

	{
		va, vb := o1.TimeField, o2.TimeField
		if va.Equal(vb) {
			return false
		}
	}
	return true
}

func (o1 *BasicAttrTypesObject) Diff(o2 *BasicAttrTypesObject) (d *metago.Diff) {

	{
		va, vb := o1.ByteField, o2.ByteField
		if va != vb {
			d.Add(NewbyteChg(BasicAttrTypesObjectByteField, true, vb, va))
		}
	}

	{
		va, vb := o1.U8Field, o2.U8Field
		if va != vb {
			d.Add(Newuint8Chg(BasicAttrTypesObjectU8Field, true, vb, va))
		}
	}

	{
		va, vb := o1.U16Field, o2.U16Field
		if va != vb {
			d.Add(Newuint16Chg(BasicAttrTypesObjectU16Field, true, vb, va))
		}
	}

	{
		va, vb := o1.U32Field, o2.U32Field
		if va != vb {
			d.Add(Newuint32Chg(BasicAttrTypesObjectU32Field, true, vb, va))
		}
	}

	{
		va, vb := o1.U64Field, o2.U64Field
		if va != vb {
			d.Add(Newuint64Chg(BasicAttrTypesObjectU64Field, true, vb, va))
		}
	}

	{
		va, vb := o1.S8Field, o2.S8Field
		if va != vb {
			d.Add(Newint8Chg(BasicAttrTypesObjectS8Field, true, vb, va))
		}
	}

	{
		va, vb := o1.S16Field, o2.S16Field
		if va != vb {
			d.Add(Newint16Chg(BasicAttrTypesObjectS16Field, true, vb, va))
		}
	}

	{
		va, vb := o1.S32Field, o2.S32Field
		if va != vb {
			d.Add(Newint32Chg(BasicAttrTypesObjectS32Field, true, vb, va))
		}
	}

	{
		va, vb := o1.S64Field, o2.S64Field
		if va != vb {
			d.Add(Newint64Chg(BasicAttrTypesObjectS64Field, true, vb, va))
		}
	}

	{
		va, vb := o1.StringField, o2.StringField
		if va != vb {
			d.Add(NewstringChg(BasicAttrTypesObjectStringField, true, vb, va))
		}
	}

	{
		va, vb := o1.TimeField, o2.TimeField
		if vaBasicAttrTypesObject.Equal(vbBasicAttrTypesObject) {
			d.Add(NewTimeChg(TimeFieldTime.Time, true, vbBasicAttrTypesObject, vaBasicAttrTypesObject))
		}
	}
	return true
}
