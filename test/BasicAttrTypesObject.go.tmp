import (
  time
  github.com/davecgh/go-spew/spew
)

type BasicAttrTypesObject struct {
  ByteField byte
  U8Field uint8
  U16Field uint16
  U32Field uint32
  U64Field uint64
  S8Field int8
  S16Field int16
  S32Field int32
  S64Field int64
  StringField string
  TimeField time.Time
}

// from: BasicAttrTypesObject
func (this *BasicAttrTypesObject) Dump_super() (string, error) {
    return spew.Sdump(*this)
}

// from: BasicAttrTypesObject
func (this *BasicAttrTypesObject) ConditionalDump_super(t bool) string {
    if t {
        return this.Dump()
    }
    return ""
}

func (o1 *BasicAttrTypesObject) Equals(other interface{}) bool {
	switch o2 := other.(type) {
	case *BasicAttrTypesObject:
		return o1.equals(o2)
	case BasicAttrTypesObject:
		return o1.equals(&o2)
	}
	return false
}

func (o1 *BasicAttrTypesObject) equals(o2 *BasicAttrTypesObject) bool {
  if o1.ByteField != o2.ByteField {
    return false
  }
  if o1.U8Field != o2.U8Field {
    return false
  }
  if o1.U16Field != o2.U16Field {
    return false
  }
  if o1.U32Field != o2.U32Field {
    return false
  }
  if o1.U64Field != o2.U64Field {
    return false
  }
  if o1.S8Field != o2.S8Field {
    return false
  }
  if o1.S16Field != o2.S16Field {
    return false
  }
  if o1.S32Field != o2.S32Field {
    return false
  }
  if o1.S64Field != o2.S64Field {
    return false
  }
  if o1.StringField != o2.StringField {
    return false
  }
  if !o1.TimeField.Equals(o2.TimeField) {
    return false
  }
}
