//
// AUTO-GENERATED by metago. DO NOT EDIT!
//

package test

import (
	"github.com/idawes/metago"
)

type StructTestObject struct {
	B  BasicAttrTypesObject
	MB map[int]BasicAttrTypesObject
}

func (o1 *StructTestObject) Equals(o2 *StructTestObject) bool {

	{
		va, vb := o1.B, o2.B
		if !va.Equals(&vb) {
			return false
		}
	}

	{
		va, vb := o1.MB, o2.MB
		if len(va) != len(vb) {
			return false
		}
		for key, va1 := range va {
			if vb1, ok := vb[key]; ok {
				if !va1.Equals(&vb1) {
					return false
				}
			} else {
				return false // didn't find key in vb
			}
		}
	}
	return true
}

func (o1 *StructTestObject) Diff(o2 *StructTestObject) *metago.Diff {
	chgs := make([]metago.Chg, 0)

	{
		va, vb := o1.B, o2.B
		if !va.Equals(&vb) {
			chgs = append(chgs, metago.NewStructChg(&StructTestObjectBSREF, va.Diff(&vb)))
		}
	}

	{
		va, vb := o1.MB, o2.MB
		for key, va1 := range va {
			if vb1, ok := vb[key]; ok {
				// "key" exists in both "va" and "vb"
				chgs1 := make([]metago.Chg, 0)
				if !va1.Equals(&vb1) {
					chgs1 = append(chgs1, metago.NewStructChg(&StructTestObjectMBSREF, va1.Diff(&vb1)))
				}
				if len(chgs1) != 0 {
					chgs = append(chgs, metago.NewIntMapChg(&StructTestObjectMBSREF, key, metago.ChangeTypeModify, chgs1))
				}
			} else {
				// "key" exists in "va" but not in "vb"
				chgs1 := make([]metago.Chg, 0)
				t := BasicAttrTypesObject{}
				chgs1 = append(chgs1, metago.NewStructChg(&StructTestObjectMBSREF, t.Diff(&va1)))
				if len(chgs1) != 0 {
					chgs = append(chgs, metago.NewIntMapChg(&StructTestObjectMBSREF, key, metago.ChangeTypeInsert, chgs1))
				}
			}
		}
		for key, vb1 := range vb {
			// each "key" is an entry that doesn't exist in "vb"
			chgs1 := make([]metago.Chg, 0)
			t := BasicAttrTypesObject{}
			chgs1 = append(chgs1, metago.NewStructChg(&StructTestObjectMBSREF, vb1.Diff(&t)))
			if len(chgs1) != 0 {
				chgs = append(chgs, metago.NewIntMapChg(&StructTestObjectMBSREF, key, metago.ChangeTypeDelete, chgs1))
			}
		}
	}
	return &metago.Diff{Chgs: chgs}
}

func (o *StructTestObject) Apply(d *metago.Diff) error {
	for _, c := range d.Chgs {
		switch c.AttributeID() {

		case &StructTestObjectBAID:
			{
				v := &o.B
				*v = c.(*metago.BasicAttrTypesObjectChg).NewValue
			}

		case &StructTestObjectMBAID:
			{
				m := o.MB
				mc := c.(*metago.IntMapChg)
				key := mc.Key
				switch mc.Typ {
				case metago.ChangeTypeModify:
					{
						s := m[key]
						c := mc.Chgs[0].(*metago.StructChg).Chg
						s.Apply(&c)
						m[key] = s
					}
				case metago.ChangeTypeInsert:
					{
						s := BasicAttrTypesObject{}
						c := mc.Chgs[0].(*metago.StructChg).Chg
						s.Apply(&c)
						m[key] = s
					}
				case metago.ChangeTypeDelete:
					delete(m, key)
				}
			}
		}
	}
	return nil
}
